module switch(
  clk,
  reset,
  pattern_ready,
  pattern_valid,
  pattern_data,
  in_ready,
  in_valid,
  out_ready,
  out_valid,
  out_t%1$s
);

input clk;
input reset;
output wire pattern_ready;
input pattern_valid;
input [7:0] pattern_data;
output reg in_ready;
input in_valid;
input out_ready;
output reg out_valid;
output reg [%2$d:0] out_t;
%3$s
reg [%2$d:0] t;
reg [%16$d:0] t_div_nmem;
reg [%28$d:0] t_mod_nmem;
reg half;
reg pattern;
reg pattern_1;
reg pattern_pending;
reg updating_pattern;
reg [%24$d:0] pattern_write_counter;
reg filled;
reg was_valid_1;
reg was_valid_0;
reg prev_half_1;
reg prev_half_0;

assign pattern_ready = !updating_pattern;

%21$sreg [%23$d:0] obuf_len;

wire [%12$d:0] in[0:%13$d];
%14$s
%4$s
function enable;
input integer i;
input integer j;
begin
  if(pattern == 0) enable = xx[(i * %10$d + j) * %11$d];
  else enable = yy[(i * %10$d + j) * %11$d];
end
endfunction

function [%18$d:0] m_in;
input integer i;
input integer j;
begin : m_in_f
  integer k;
  if(pattern == 0) begin
    for(k = 0; k < %17$d; k = k + 1) begin
      m_in[k] = xx[(i * %10$d + j) * %11$d + 1 + k];
    end
  end
  else begin
    for(k = 0; k < %17$d; k = k + 1) begin
      m_in[k] = yy[(i * %10$d + j) * %11$d + 1 + k];
    end
  end
end
endfunction

function [%16$d:0] address;
input integer i;
begin : address_f
  integer k;
  if(pattern_1 == 0) begin
    for(k = 0; k < %15$d; k = k + 1) begin
      address[k] = xx[%29$d + i * %30$d + %31$d + k];
    end
  end
  else begin
    for(k = 0; k < %15$d; k = k + 1) begin
      address[k] = yy[%29$d + i * %30$d + %31$d + k];
    end
  end
end
endfunction

function [%28$d:0] which_mem;
input integer i;
begin : address_f
  integer k;
  if(pattern_1 == 0) begin
    for(k = 0; k < %31$d; k = k + 1) begin
      which_mem[k] = xx[%29$d + i * %30$d + k];
    end
  end
  else begin
    for(k = 0; k < %31$d; k = k + 1) begin
      which_mem[k] = yy[%29$d + i * %30$d + k];
    end
  end
end
endfunction

always @(posedge clk or posedge reset)
begin : main
  integer i;
  if(reset) begin
    out_t <= %7$d;
    t <= 0;
    t_div_nmem <= 0;
    t_mod_nmem <= 0;
    half <= 0;
    pattern <= 0;
    pattern_1 <= 0;
    pattern_pending <= 0;
    filled <= 0;
    was_valid_0 <= 0;
    was_valid_1 <= 0;
    pattern_write_counter <= 0;
    updating_pattern <= 0;
    in_ready <= 1;
    obuf_len <= 0;
%26$s  end
  else begin
    if(in_valid) begin : valid_task
      reg [%18$d:0] m_in_tmp;

      if(t == %7$d) begin
        t <= 0;
        t_div_nmem <= 0;
        t_mod_nmem <= 0;
        half <= ~half;
        filled <= 1;
        if(pattern_pending) begin
          pattern <= ~pattern;
          pattern_pending <= 0;
          updating_pattern <= 0;
        end
        pattern_1 <= pattern;
      end
      else begin 
        t <= t + 1;
        if(t_mod_nmem == %9$d) begin
          t_div_nmem <= t_div_nmem + 1;
          t_mod_nmem <= 0;
        end
        else begin
          t_mod_nmem <= t_mod_nmem + 1;
        end
      end

%8$s    end
    else begin
%27$s    end

    if(was_valid_0) begin
%19$s    end

    was_valid_1 <= filled && in_valid;
    was_valid_0 <= was_valid_1;
    prev_half_1 <= half;
    prev_half_0 <= prev_half_1;
%32$s
    if(out_ready && obuf_len > 0) begin
%20$s      if(out_t == %7$d) out_t <= 0;
      else out_t <= out_t + 1;
      out_valid <= 1;
    end
    else begin
      out_valid <= 0;
    end
    obuf_len <= obuf_len +
      (was_valid_0) -
      (out_ready && obuf_len > 0);
    in_ready <= obuf_len < 3;

    if(pattern_valid && pattern_write_counter == %25$d) updating_pattern <= 1;
    else if(in_valid && t == %7$d) updating_pattern <= 0;

    if(pattern_valid) begin
      if(pattern_write_counter == %25$d) begin
        pattern_write_counter <= 0;
        pattern_pending <= 1;
      end
      else begin
        pattern_write_counter <= pattern_write_counter + 1;
      end
    end
  end
end

endmodule
