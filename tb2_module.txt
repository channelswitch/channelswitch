module switch_tb;
reg clock, reset, out_ready, in_valid, pattern_valid;
reg [7:0] pattern_data;
wire pattern_ready, in_ready, out_valid;
wire %5$s out_t;
%1$s%2$s
switch i1(
	clock,
	reset,
	pattern_ready,
	pattern_valid,
	pattern_data,
	in_ready,
	in_valid,
	out_ready,
	out_valid,
	out_t%3$s%4$s
);

integer i;
integer j;

integer permutation0[0:%9$d - 1];
integer permutation1[0:%9$d - 1];
integer perm1_valid;
initial begin
	for(i = 0; i < %9$d; i = i + 1) begin
		permutation0[i] = i;
	end
	perm1_valid = 0;
end

integer seed_pattern = %8$d;
reg [7:0] pattern [0:%9$d * 10 + 100];
integer pattern_len;

integer first = 1;
task write_pattern;
integer tmp [0:%9$d - 1];
integer tmp_len;
integer tmp_idx;
integer is_equal;
begin
	if(first ||
            (perm1_valid == 0 && ($random(seed_pattern) %% %14$d) == 0)
          ) begin
                first = 0;
		for(i = 0; i < %9$d; i = i + 1) begin
			tmp[i] = i;
		end
		tmp_len = %9$d;
		for(i = 0; i < %9$d; i = i + 1) begin
			tmp_idx = {$random(seed_pattern)}
				%% tmp_len;
			permutation1[i] = tmp[tmp_idx];
			for(j = tmp_idx; j < tmp_len - 1; j = j + 1) begin
				tmp[j] = tmp[j + 1];
			end
			tmp_len = tmp_len - 1;
		end
		/* Two equal permutations in a row would result in the testbench
		 * never being sure when the hardware has switched to the new
		 * one. */
		is_equal = 1;
		for(i = 0; i < %9$d; i = i + 1) begin
			if(permutation1[i] != permutation0[i]) is_equal = 0;
		end
		if(is_equal == 0) begin
			perm1_valid = 1;
			$generate_pattern_data(
				permutation1, pattern, pattern_len);
		end
	end

	if(pattern_len > 0 && pattern_ready) begin
		pattern_data <= pattern[0];
		for(i = 0; i < pattern_len - 1; i = i + 1) begin
			pattern[i] <= pattern[i + 1];
		end
		pattern_valid <= 1;
		pattern_len <= pattern_len - 1;
	end
	else begin
		pattern_valid <= 0;
	end
end
endtask

integer input_value;
integer seed_in = %8$d;
task write_input;
begin
%15$send
endtask

integer n_permutations_detected = 0;
integer seed_out = %8$d;
integer output0[0:%9$d - 1];
integer output1[0:%9$d - 1];
integer output_ptr = %9$d;
integer output_valid0;
integer output_valid1;
integer output_was_valid;
integer output_t;
task check_output;
integer tmp;
integer valid0;
integer valid1;
begin
	if(output_ptr == %9$d) begin
		/* Output may correspond to permutation 1 falsely if inputs
		 * contain multiple of the same values. */
		if(output_valid1 && !output_valid0) begin
			n_permutations_detected = n_permutations_detected + 1;
			for(i = 0; i < %9$d; i = i + 1) begin
				permutation0[i] = permutation1[i];
			end
			perm1_valid = 0;
		end
		for(i = 0; i < %9$d; i = i + 1) begin
			tmp = $random(seed_out) & ((1 << %10$d) - 1);
			output0[permutation0[i]] = tmp;
			if(perm1_valid) begin
				output1[permutation1[i]] = tmp;
			end
		end
		output_ptr = 0;
		output_valid0 = 1;
		output_valid1 = perm1_valid;
	end

	valid0 = 1;
	valid1 = 1;
	output_t = output_ptr / %11$d;
%16$s	output_valid0 = output_valid0 & valid0;
	output_valid1 = output_valid1 & valid1;
	output_was_valid = output_valid0 | output_valid1;
end
endtask

task expected;
begin
	$display("Expected:");
	for(i = 0; i < %11$d; i = i + 1) begin
		if(perm1_valid) begin
			$display("out%%1d = 0x%%1x or 0x%%1x", i,
				output0[output_t * %11$d + i],
				output1[output_t * %11$d + i]);
		end
		else begin
			$display("out%%d = %%1x", i,
				output0[output_t * %11$d + i]);
		end
	end
end
endtask

integer seed_rdy = %8$d + 2;
integer was_ready;
integer operating_continuously;
initial begin
	clock = 0;
	reset = 1;
	out_ready = 0;
	in_valid = 0;
	pattern_valid = 0;
	#9;

	reset = 0;
	#1;

	repeat(%13$d) begin
		clock = 1;
		#1;

		was_ready = out_ready;
		out_ready = $random(seed_rdy) & 1;

		if(in_ready && ($random(seed_rdy) & 1)) begin
			write_input();
			in_valid = 1;
		end
		else begin
			in_valid = 0;
		end

		if(out_valid) begin
			if(!was_ready) begin
				$error("Output when not ready\n");
				$stop;
			end

			check_output();
			if(!output_was_valid) begin
				$error("Mismatch\n");
				expected();
				$stop;
			end

			if(out_t !== output_t) begin
				$error("Wrong time\n");
				$stop;
			end
		end

		write_pattern();

		#4;
		clock = 0;
		#5;
	end
	operating_continuously = 0;
	repeat(%13$d) begin
		clock = 1;
		#1;

		out_ready = 1;

		if(in_ready) begin
			operating_continuously = 1;
			write_input();
			in_valid = 1;
		end
		else begin
			if(operating_continuously) begin
				$error("Failed to do continuous streaming.\n");
				$stop;
			end
			in_valid = 0;
		end

		if(out_valid) begin
			if(!was_ready) begin
				$error("Output when not ready\n");
				$stop;
			end

			check_output();
			if(!output_was_valid) begin
				$error("Mismatch\n");
				expected();
				$stop;
			end

			if(out_t !== output_t) begin
				$error("Wrong time\n");
				$stop;
			end
		end

		write_pattern();

		#4;
		clock = 0;
		#5;
	end
	$display("Success!\n");
	$display("%%d different permutations were tested.\n", n_permutations_detected);
	$stop;
end

endmodule
