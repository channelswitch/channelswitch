reg %1$s[%3$d:0];
always @(posedge clk or posedge reset) begin : %1$s_task
  integer i;
  integer j;
  integer k;
  integer l;
  integer pos;
  if(reset) begin
    pos = 0;
    for(i = 0; i < %4$d; i = i + 1) begin
      for(j = 0; j < %5$d; j = j + 1) begin
        for(k = 0; k < %6$d; k = k + 1) begin
          %1$s[pos] <= k %% %5$d == j;
          pos = pos + 1;
          for(l = 0; l < %7$d; l = l + 1) begin
            %1$s[pos] <= (i >> l) & 1;
            pos = pos + 1;
          end
        end
      end
    end
    for(i = 0; i < %4$d; i = i + 1) begin
      for(k = 0; k < %6$d; k = k + 1) begin
        for(l = 0; l < %8$d; l = l + 1) begin
          %1$s[pos] <= ((k %% %5$d) >> l) & 1;
          pos = pos + 1;
        end
        for(l = 0; l < %9$d; l = l + 1) begin
          %1$s[pos] <= ((k / %5$d) >> l) & 1;
          pos = pos + 1;
        end
      end
    end
  end
  else begin
    if(pattern_valid && !updating_pattern && pattern != %2$d) begin
      for(i = 0; i < 8; i = i + 1) %1$s[i] <= pattern_data[i];
      for(i = 8; i < %10$d; i = i + 1) %1$s[i] <= %1$s[i - 8];
    end
    else begin
      if(pattern == %2$d && in_valid) begin
        for(i = 0; i < %4$d; i = i + 1) begin
          for(j = 0; j < %5$d; j = j + 1) begin
            for(k = 0; k < %6$d; k = k + 1) begin
              for(l = 0; l < %11$d; l = l + 1) begin
                %1$s[(i * %5$d + j) * %6$d * %11$d + k * %11$d + l] <=
                  %1$s[(i * %5$d + j) * %6$d * %11$d + ((k + 1) %% %6$d) * %11$d + l];
              end
            end
          end
        end
      end
      if(pattern_1 == %2$d && in_valid) begin
        for(i = 0; i < %4$d; i = i + 1) begin
          for(k = 0; k < %6$d; k = k + 1) begin
            for(l = 0; l < %14$d; l = l + 1) begin
              %1$s[%12$d + i * %13$d + k * %14$d + l] <=
                %1$s[%12$d + i * %13$d + ((k + 1) %% %6$d) * %14$d + l];
            end
          end
        end
      end
    end
  end
end

