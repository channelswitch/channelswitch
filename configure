#!/bin/sh

# Defaults
DEBUG_CFLAGS='-g -Werror -Wfatal-errors'
RELEASE_CFLAGS='-O2'
if [ -z "$CFLAGS" ]; then CFLAGS="$RELEASE_CFLAGS"; fi
if [ -z "$CC" ]; then CC=cc; fi
if [ -z "$LD" ]; then LD=ld; fi

# Option parsing
for arg in "$@"; do
	case $arg in
		--debug) CFLAGS="$DEBUG_CFLAGS" ;;
		--release) CFLAGS="$RELEASE_CFLAGS" ;;
		CFLAGS=*) CFLAGS=$(echo "$arg" | cut -d= -f2-) ;;
		CC=*) CC=$(echo "$arg" | cut -d= -f2-) ;;
		LD=*) LD=$(echo "$arg" | cut -d= -f2-) ;;
		--help) cat <<EOT
Configuration script for a generic interleaver generator.

  --help		Print this help text.
  --debug,--release	Choose between debug and release mode. [Release]
EOT
			exit ;;
		*) echo Unrecognized option: $arg.; exit 1 ;;
	esac
done

# For out of tree build
SRC=$(dirname "$0")

# Makefile contains the following
exec 3>Makefile
printf "# Generated by configure\n" >&3
printf "\n" >&3
printf "default:\n" >&3
printf "\t$SRC/configure  CC='${CC}' LD='${LD}' CFLAGS='${CFLAGS}'\n" >&3
printf "\t\${MAKE} -f Makefile.real default\n" >&3
printf "pdf:\n" >&3
printf "\t$SRC/configure  CC='${CC}' LD='${LD}' CFLAGS='${CFLAGS}'\n" >&3
printf "\t\${MAKE} -f Makefile.real pdf\n" >&3
printf "\n" >&3
exec 3>&-

# Actual make rules in Makefile.real
exec 3>Makefile.real

olddeps() {
	if [ -e "$1" ]; then
		cat "$1"
	fi
}

mm() {
	printf "${CC} -MM $1 | cut -d: -f2- | tr '\\\\\\\\\\\\\\\\' '\\\\\\\\n' | tr -d '\\\\\\\\n' > $2\n"
}

rule() {
	for i in $2; do
		if [ ! -e "$i" ]; then printf '%s:\n\n' "$i" >&3; fi
	done
	if ! printf '%s' "$3" | cmp -s $1.cmd -; then
		printf '%s' "$3" > $1.cmd;
	fi
	printf "$1: $1.cmd $2\n" >&3
	printf "$3\n" >&3
}

OBJECTS=

compile() {
	rule $1.o "$(olddeps $1.d)" "\t$CC $CFLAGS -c $SRC/$1.c\n\t$(mm $SRC/$1.c $1.d)\n"
	OBJECTS="$OBJECTS $1.o"
}

compile writetestbench
compile testbench_2
compile vpi
compile writeheader
compile writeverilog_bitonic
compile writecode_bitonic
compile writeverilog_memories
compile clos_network
compile clos_network_2
compile memories_2
compile bitonic_2
compile catf
compile generate

includetext() {
	rule $1.o $SRC/$1.txt "\tprintf '\\\\0' | cat $SRC/$1.txt - > $1.0\n\t$LD -s -r -o $1.o -b binary $1.0\n"
	OBJECTS="$OBJECTS $1.o"
}

includetext tb_module
includetext tb2_module
includetext tb_vpi
includetext c_header
includetext i1_module
includetext i1_swap
includetext i1_swapper
includetext i1_delay
includetext i1_delayer
includetext c1_source
includetext i2_module
includetext i2_pattern
includetext c2_source
includetext i3_module
includetext c3_source
includetext i4_module
includetext c4_source
includetext i5_module
includetext c5_source
includetext i6_module
includetext i6_swap
includetext i6_delay
includetext i6_swap_control
includetext i6_delay_control
includetext c6_source

rule generate "$OBJECTS" "\t$CC $CFLAGS -o generate $OBJECTS\n"

fig() {
	rule $1.eps $SRC/$1.fig "\tfig2dev -L eps $SRC/$1.fig $1.eps\n"
}

fig bitonic
fig sorting_network
fig sorting_network_2
fig clos
fig benes
fig asbenes

printf "TEXINPUTS:=$SRC/rtthesis:\$(TEXINPUTS)\nexport TEXINPUTS\n\n" >&3

pdf() {
	rule $1.pdf "$SRC/$1.tex $2" "\tcp $SRC/$1.tex ./\n\tpdflatex $1\n\tbibtex $1\n\tpdflatex $SRC/$1\n"
}

pdf_bib() {
	rule $1.pdf "$SRC/$1.tex $2 $SRC/$3.bib" "\tcp $SRC/$1.tex ./\n\tcp $SRC/$3.bib ./\n\tpdflatex -interaction=batchmode $1\n\tpdflatex -interaction=batchmode $SRC/$1\n\tpdflatex -interaction=batchmode $SRC/$1\n"
}

rule "all_csv_files" "$SRC/results.csv $SRC/generate_plots.sh" "\t$SRC/generate_plots.sh $SRC/results.csv\n"

pdf planning bitonic.eps
pdf_bib report "sorting_network_2.eps bitonic.eps clos.eps benes.eps asbenes.eps all_csv_files" "bib"

printf "pdf: planning.pdf report.pdf\n\n" >&3
printf "all: generate pdf\n\n" >&3
printf "default: generate\n\n" >&3

exec 3>&-
